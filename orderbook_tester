# -*- coding: utf-8 -*-
"""
Created on Wed May  9 19:39:53 2018

@author: lorand
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import scipy.misc
import random

from keras.models import Sequential
from keras.layers import Activation, Dense
from keras.layers import Conv2D
from keras.layers import Flatten, MaxPooling2D
from keras import optimizers
from keras.optimizers import SGD
import scipy


###############################################################################

def calc_avgmin(matrix,cutoff :bool = False):
    averagemin = 0
    if cutoff:# orderbook utolso 100 eleme neha nulla... TODO
        for i in range(matrix.shape[0]):
            averagemin += np.argmin(data[i,:-200],axis=0)
    else:
        for i in range(matrix.shape[0]):
            averagemin += np.argmin(data[i],axis=0)
    averagemin = int(averagemin / data.shape[0])    

def create_pictures(data: np.ndarray, label: np.array, height: int,
                    keep: int = 50, hatar: int=10):
    
    features = np.zeros((data.shape[0]-height, height, keep, 1))

    minimum = np.argmin(data[0], axis=0)

    len_data = data.shape[0]
    for i in range(0,len_data-height):
        picture = data[i:i+height,:]
        
        most = np.argmin(data[i],axis=0)
        if abs(most - minimum) > hatar:
            minimum = most
            
        picture = picture[:,int(minimum-keep/2):int(minimum+keep/2)]
               
        
        
        #TODO meg az orderbook minimum pontjanak mozgasat tesztel
        picture = picture / picture.max()
        
        if i%50==0:
            scipy.misc.imsave('kepek/outfile{}.jpg'.format(i), picture)
        
        features[i] = picture.reshape((picture.shape[0],picture.shape[1],1))# CHECK
        
    return features,label[height:]

def split_data(data, training_size=0.8):
    return data[:int(training_size*len(data))], data[int(training_size*len(data)):]


def polling_list(in_list,value):
    ret = []
    osszeg = 0
    
    for i in range(1,len(in_list)+1):
        if (i) % value == 0:
            ret.append(osszeg + in_list[i-1])
            osszeg = 0
        else:
            osszeg += in_list[i-1]
            
    
    return ret

def reduce_orderbook(obook,val):
    new_obook = []
    
    for i in range(len(obook)):
        new_obook.append( polling_list(obook[i],val) )
    return np.array(new_obook)



###############################################################################
df = pd.read_csv('hetfoi_adat/obook2.csv')
data = df.values
#data = data[:,450:1450]
y = data[0]
x = np.arange(len(y))
plt.plot(x,y)
plt.show()

levag_intervallum = 400 

#get average min:
averagemin = 0
for i in range(data.shape[0]):    
    averagemin += np.argmin(data[i,:-200],axis=0)
averagemin = int(averagemin / data.shape[0])

print(data.shape)
data = data[:,averagemin-levag_intervallum:averagemin+levag_intervallum]
print('new shape = {}'.format(data.shape))



features, label = create_pictures(data,np.arange(data.shape[0]),100)



y = data[0]
x = np.arange(len(y))
plt.plot(x,y)
plt.show()

asd = polling_list(data[0],10)

asd = np.array(asd)

y = asd
x = np.arange(len(y))
plt.plot(x,y)
plt.show()
